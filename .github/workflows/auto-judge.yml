name: Auto Test

on:
  pull_request:
    branches:
      - master
  workflow_dispatch:

env:
  BUILD_TYPE: Release
  GH_TOKEN: ${{github.token}}

jobs:
  compile:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Cache CMake
        id: cache-cmake
        uses: actions/cache@v4
        with:
          path: ${{github.workspace}}/bin
          key: ${{runner.os}}-cmake-${{hashFiles('src/**','include/**')}}

      - name: Install LLVM and Clang
        if: steps.cache-cmake.outputs.cache-hit != 'true'
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: "10.0"

      - name: CMake Build
        if: steps.cache-cmake.outputs.cache-hit != 'true'
        run: |
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
                -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

  functional-test:
    needs: compile
    runs-on: ubuntu-latest
    strategy:
      matrix:
        type: [LLVM]
        opt: [O0]

    steps:
      - uses: actions/checkout@v4

      - name: Restore Build Cache
        id: cache-cmake
        uses: actions/cache@v4
        with:
          path: ${{github.workspace}}/build
          key: ${{runner.os}}-cmake-${{hashFiles('src/**','include/**')}}

      - name: If Cache Missed
        if: steps.cache-cmake.outputs.cache-hit != 'true'
        run: exit 1

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v2
        if: ${{ matrix.type == 'LLVM' }}
        with:
          version: "16.0"

      - name: Download Test Data
        run: |
          wget https://gitlab.eduxiji.net/csc1/nscscc/compiler2024/-/raw/main/testdata.zip
          unzip testdata.zip
          mv testdata/* tests

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: |
          chmod +x ${{github.workspace}}/tests/*.sh
          chmod +x ${{github.workspace}}/tests/*.py
          ctest -C ${{env.BUILD_TYPE}} --output-on-failure -R Functional-${{matrix.type}}-${{matrix.opt}}-*

      - name: Summary
        if: failure()
        run: |
          echo "## Functional Test Summary (${{matrix.type}}-${{matrix.opt}}):" >> $GITHUB_STEP_SUMMARY
          echo "| Test Name | Passed | Failed |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          cat ${{github.workspace}}/tests/functional.log >> $GITHUB_STEP_SUMMARY || true
          cat ${{github.workspace}}/tests/h_functional.log >> $GITHUB_STEP_SUMMARY || true
          echo '' >> $GITHUB_STEP_SUMMARY

      - name: zip failed log
        if: failure()
        working-directory: ${{github.workspace}}/tests
        run: zip ${{matrix.type}}-${{matrix.opt}}-failed.zip \
          functional/*.ll functional/*.S functional/*.myout functional/*.myerr \
          h_functional/*.ll h_functional/*.S h_functional/*.myout h_functional/*.myerr

      - name: upload failed log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          path: ${{github.workspace}}/tests/${{matrix.type}}-${{matrix.opt}}-failed.zip
          name: ${{matrix.type}}-${{matrix.opt}}-failed
          retention-days: 3