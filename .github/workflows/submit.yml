name: Build and Sync

# 触发器配置
on:
  workflow_dispatch:
  push:
    branches:
      - master

# 定义所有作业
jobs:
#  # --- 作业 1: 编译 ---
#  build:
#    name: Build with Clang 18 (Release)
#    runs-on: ubuntu-latest
#
#    steps:
#      # 步骤 1: 检出 master 分支的代码
#      - name: Checkout repository
#        uses: actions/checkout@v4
#        with:
#          ref: master
#
#      # 步骤 2: 安装系统依赖
#      - name: Install system dependencies
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y wget gnupg software-properties-common
#
#      # 步骤 3: 安装 LLVM 18 官方包
#      - name: Install LLVM 18
#        run: |
#          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
#          sudo add-apt-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main"
#          sudo apt-get update
#          sudo apt-get install -y clang-18 clang++-18 libc++-18-dev libc++abi-18-dev
#          sudo ln -sf /usr/bin/clang-18 /usr/local/bin/clang
#          sudo ln -sf /usr/bin/clang++-18 /usr/local/bin/clang++
#
#      # 步骤 4: 验证编译器版本
#      - name: Check compiler versions
#        run: |
#          clang --version
#          clang++ --version
#
#      # 步骤 5: 配置 CMake
#      - name: Configure CMake (Release)
#        run: |
#          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release \
#                -DCMAKE_C_COMPILER=/usr/local/bin/clang \
#                -DCMAKE_CXX_COMPILER=/usr/local/bin/clang++
#
#      # 步骤 6: 执行编译
#      - name: Build Project
#        run: cmake --build build --config Release -- -j8

  # --- 作业 2: 同步到 GitLab ---
  sync-to-gitlab:
    name: Sync to GitLab
    runs-on: ubuntu-latest

    steps:
      # 步骤 1: 检出 GitHub 源码
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: master

      # 步骤 2: 安装 clang-format-18
      - name: Install LLVM 18 for clang-format
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg software-properties-common
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo add-apt-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main"
          sudo apt-get update
          # 确保安装的是 18 版本，与 build 作业一致
          sudo apt-get install -y clang-format-18
          # 创建软链接方便直接调用
          sudo ln -sf /usr/bin/clang-format-18 /usr/local/bin/clang-format

      # 步骤 3: 格式化、提交并推送到 GitLab
      - name: Format, Commit, and Sync to GitLab
        env:
          # 将 GitLab Token 和 GitHub 上下文变量传入脚本环境
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
          GITHUB_SHA: ${{ github.sha }}
          EVENT_NAME: ${{ github.event_name }}
        run: |
          # 创建一个临时目录用于准备推送到 GitLab 的内容
          SYNC_DIR="/tmp/gitlab-sync"
          mkdir -p "$SYNC_DIR"
          
          echo "Syncing project files to temporary directory..."
          cp -r src include CMakeLists.txt format.sh readme.md /tmp/gitlab-sync/
          if [ -f .clang-format ]; then
            cp .clang-format /tmp/gitlab-sync/
          fi
          
          cd "$SYNC_DIR"
          
          echo "Formatting code..."
          find . -name '*.cpp' -o -name '*.hpp' -o -name '*.c' -o -name '*.h' | xargs clang-format -i
          
          git init
          git config --local user.name "GitHub Action Bot"
          git config --local user.email "action@github.com"
          git add .
          
          TIMESTAMP=$(TZ='Asia/Shanghai' date +"%Y-%m-%d %H:%M:%S")
          SHORT_SHA=$(echo "$GITHUB_SHA" | cut -c1-7)
          COMMIT_MESSAGE=""
          
          if [[ "$EVENT_NAME" == "schedule" ]]; then
            COMMIT_MESSAGE="[Auto Sync]: Automated update from GitHub at ${TIMESTAMP} (ref: ${SHORT_SHA})"
          else
            COMMIT_MESSAGE="[Manual Sync]: Manual update from GitHub at ${TIMESTAMP} (ref: ${SHORT_SHA})"
          fi
          
          echo "Commit Message: $COMMIT_MESSAGE"
          git commit -m "$COMMIT_MESSAGE"
          
          GITLAB_REMOTE="https://pat:${GITLAB_TOKEN}@gitlab.eduxiji.net/T202510006205548/one-big-beautiful-shit-compiler.git"
          git remote add gitlab "$GITLAB_REMOTE"
          
          echo "Pushing to GitLab..."
          git push gitlab HEAD:master --force