name: Build and Sync

# 触发器配置
on:
  # 1. 手动触发器：可以在 Actions 页面手动运行此工作流
  workflow_dispatch:

  schedule:
    - cron: '0 17 * * *'

# 定义所有作业
jobs:
  # --- 作业 1: 编译 ---
  build:
    name: Build with Clang 18 (Release)
    runs-on: ubuntu-latest

    steps:
      # 步骤 1: 检出 master 分支的代码
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: master

      # 步骤 2: 安装编译依赖
      - name: Install build dependencies
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo add-apt-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main"
          sudo apt-get update
          sudo apt-get install -y clang-18 clang++-18 libc++-18-dev libc++abi-18-dev

      # 步骤 3: 配置 CMake
      - name: Configure CMake (Release)
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_C_COMPILER=/usr/bin/clang-18 \
                -DCMAKE_CXX_COMPILER=/usr/bin/clang++-18

      # 步骤 4: 执行编译
      - name: Build Project
        run: cmake --build build --config Release -- -j8

  # --- 作业 2: 同步到 GitLab ---
  sync-to-gitlab:
    needs: build
    name: Sync to GitLab
    runs-on: ubuntu-latest

    steps:
      # 步骤 1: 检出 GitHub 源码 (作为“源”)
      - name: Checkout GitHub repository (Source)
        uses: actions/checkout@v4
        with:
          path: source

      # 步骤 2: 安装同步和格式化所需的依赖
      - name: Install sync dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git rsync wget gnupg software-properties-common
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo add-apt-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main"
          sudo apt-get update
          sudo apt-get install -y clang-format-18
          sudo ln -sf /usr/bin/clang-format-18 /usr/local/bin/clang-format

      # 步骤 3: 克隆 GitLab 仓库 (作为“目标”)
      - name: Clone GitLab repository (Destination)
        env:
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
        run: |
          git clone --branch main --single-branch "https://pat:${GITLAB_TOKEN}@gitlab.eduxiji.net/T202510006205548/one-big-beautiful-shit-compiler.git" gitlab-repo

      # 步骤 4: 同步文件、格式化并根据触发方式提交
      - name: Sync, format, and commit
        # 将 github.event_name 传入 shell 环境
        env:
          EVENT_NAME: ${{ github.event_name }}
        run: |
          cd gitlab-repo

          echo "Syncing files from source to destination..."
          rsync -av --delete --exclude='.git/' ../source/ .

          echo "Formatting code..."
          find . -name '*.cpp' -o -name '*.hpp' -o -name '*.c' -o -name '*.h' | xargs clang-format -i

          git config --local user.name "GitHub Action"
          git config --local user.email "action@github.com"
          
          if [[ -z $(git status --porcelain) ]]; then
            echo "No changes detected. Workflow finished successfully."
            exit 0
          fi

          echo "Changes detected. Committing..."
          git add .
          
          TIMESTAMP=$(TZ='Asia/Shanghai' date +"%Y-%m-%dT%H:%M:%S%z")
          
          if [[ "$EVENT_NAME" == "schedule" ]]; then
            COMMIT_MESSAGE="[Sync]: Automated update from GitHub at ${TIMESTAMP}"
          else
            COMMIT_MESSAGE="[Sync]: Manual update from GitHub at ${TIMESTAMP}"
          fi
          
          echo "Commit message: $COMMIT_MESSAGE"
          git commit -m "$COMMIT_MESSAGE"

      # 步骤 5: 推送新的 commit 到 GitLab
      - name: Push new commit to GitLab
        run: |
          cd gitlab-repo
          echo "Pushing new commit to GitLab..."
          git push origin master
          echo "Sync completed successfully."