var __index = {"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"index.html","title":"\u9996\u9875","text":"<p>\u8fd9\u662fSHIT-Compiler\u7684\u5185\u90e8\u6587\u6863\u7ad9\u3002</p> <p></p> <p>Every single day I will be fighting for you with every breath in my body.  I will not rest until we have delivered the strong, safe and prosperous compiler that our children deserve and that you deserve.  This will truly be the golden age of BUAA.</p> <p>-- Mr. He Liqun, the greatest compiler maker of all time.</p>"},{"location":"%E4%B8%AD%E7%AB%AF/Value%E5%92%8CUser.html","title":"Value\u548cUser","text":"<p>\u4f5c\u8005\uff1azxw</p> <p>\u6700\u8fd1\u4e00\u6b21\u66f4\u65b0\u4e8e2025/3/25</p> <p>\u6b63\u5982\u603b\u89c8\u4e2d\u6240\u4ecb\u7ecd\u7684\uff0c\u5728LLVM\u4e2d\uff0c\u201c\u4e00\u5207\u7686Value\u201d\uff0c\u6240\u6709\u7684\u8bed\u6cd5\u6210\u5206\u5747\u4e3a<code>Value</code>\u7684\u5b50\u7c7b\u3002</p> <p><code>User</code> \u7c7b\u662f <code>Value</code> \u7684\u4e00\u4e2a\u7279\u6b8a\u7684\u5b50\u7c7b\uff0c\u662f\u4e00\u79cd\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6 Value \u5bf9\u8c61\u7684 Value \u7c7b\u3002Function\u3001BasicBlock \u548c Instruction \u90fd\u6709\u4f7f\u7528\u7684\u8bed\u6cd5\u7ed3\u6784\uff0c\u90fd\u662f User \u7684\u5b50\u7c7b\uff0c\u4e5f\u662f Value \u7684\u5b50\u7c7b\u3002</p>"},{"location":"%E4%B8%AD%E7%AB%AF/Value%E5%92%8CUser.html#_1","title":"\u751f\u547d\u5468\u671f","text":"<p>\u5728SHIT-compiler\u4e2d\uff0c\u6211\u4eec\u76f4\u63a5\u5728<code>User</code>\u548c<code>Value</code>\u4e4b\u95f4\u7ef4\u62a4\u4f7f\u7528\u4e0e\u88ab\u4f7f\u7528\u7684\u5173\u7cfb\u3002\u8fd9\u5c31\u610f\u5473\u7740\uff1aUser\u6301\u6709Value\uff0cUser\u63a7\u5236\u7740Value\u7684\u751f\u547d\u5468\u671f\u3002</p> <p>\u56e0\u6b64\uff0cValue\u4e2d\u5b58\u50a8User\u7684\u6307\u9488\u4e3a<code>std::weak_ptr</code>\uff0c\u53ea\u4fdd\u5b58\u5f31\u5f15\u7528\u800c\u4e0d\u4f1a\u589e\u52a0\u4f7f\u7528\u8ba1\u6570\u3002\u56e0\u4e3aUser\u6301\u6709Value\uff0c\u6240\u4ee5\u8fd9\u6837\u7684\u751f\u547d\u5468\u671f\u63a7\u5236\u662f\u5408\u7406\u7684\u3002</p> <p>\u5bf9\u5e94\u7684\uff1aUser\u4e2d\u5b58\u50a8Value\u7684\u6307\u9488\u4e3a<code>std::shared_ptr</code>\u3002</p>"},{"location":"%E4%B8%AD%E7%AB%AF/Value%E5%92%8CUser.html#value","title":"Value","text":"<p>\u5728SHIT-complier\u4e2d\uff0cValue\u7c7b\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a <pre><code>class Value : public std::enable_shared_from_this&lt;Value&gt; {\nprotected:\n    std::string name_;\n    std::shared_ptr&lt;Type::Type&gt; type_;\n    std::vector&lt;std::weak_ptr&lt;User&gt;&gt; users_{};\n\npublic:\n    Value(std::string name, const std::shared_ptr&lt;Type::Type&gt; &amp;type)\n        : name_{std::move(name)}, type_(type) {}\n\n    Value(const Value &amp;other) = delete;\n\n    Value &amp;operator=(const Value &amp;other) = delete;\n\n    Value(Value &amp;&amp;other) = delete;\n\n    Value &amp;operator=(Value &amp;&amp;other) = delete;\n\n    virtual ~Value() = default;\n\n    [[nodiscard]] const std::string &amp;get_name() const { return name_; }\n\n    void set_name(const std::string &amp;name) { this-&gt;name_ = name; }\n\n    [[nodiscard]] std::shared_ptr&lt;Type::Type&gt; get_type() const { return type_; }\n\n    void cleanup_users();\n\n    void add_user(const std::shared_ptr&lt;User&gt; &amp;user);\n\n    void delete_user(const std::shared_ptr&lt;User&gt; &amp;user);\n\n    void replace_by_new_value(const std::shared_ptr&lt;Value&gt; &amp;new_value);\n\n    std::vector&lt;std::weak_ptr&lt;User&gt;&gt; &amp;weak_users() { return users_; }\n\n    [[nodiscard]] virtual bool is_constant() { return false; }\n\n    [[nodiscard]] virtual std::string to_string() const = 0;\n\n    class UserRange {\n        using UserPtr = std::weak_ptr&lt;User&gt;;\n        std::vector&lt;UserPtr&gt; &amp;users_;\n\n    public:\n        explicit UserRange(std::vector&lt;UserPtr&gt; &amp;users) : users_{users} {}\n\n        struct Iterator {\n            std::vector&lt;UserPtr&gt;::iterator current;\n\n            explicit Iterator(const std::vector&lt;UserPtr&gt;::iterator current) : current(current) {}\n\n            std::shared_ptr&lt;User&gt; operator*() const { return current-&gt;lock(); }\n\n            bool operator!=(const Iterator &amp;other) const { return current != other.current; }\n\n            Iterator &amp;operator++() {\n                ++current;\n                return *this;\n            }\n        };\n\n        [[nodiscard]] size_t size() const { return users_.size(); }\n        [[nodiscard]] Iterator begin() const { return Iterator{users_.begin()}; }\n        [[nodiscard]] Iterator end() const { return Iterator{users_.end()}; }\n    };\n\n\n    [[nodiscard]] UserRange users() {\n        cleanup_users();\n        return UserRange{users_};\n    }\n\n    template&lt;typename T&gt;\n    std::shared_ptr&lt;T&gt; as() {\n        return std::static_pointer_cast&lt;T&gt;(shared_from_this());\n    }\n};\n</code></pre></p> <p>Value\u7c7b\u7ee7\u627f<code>std::enable_shared_from_this&lt;Value&gt;</code>\uff1a</p> <ul> <li>\u786e\u4fdd\u5bf9\u8c61\u751f\u547d\u5468\u671f\uff1a\u4f7f\u7528 <code>shared_from_this</code> \u53ef\u4ee5\u83b7\u53d6\u5230\u81ea\u8eab\u7684 <code>std::shared_ptr</code>\uff0c\u4ece\u800c\u589e\u52a0\u5bf9\u8c61\u7684\u5f15\u7528\u8ba1\u6570\uff0c\u907f\u514d\u51fa\u73b0\u60ac\u7a7a\u6307\u9488\u548c\u672a\u5b9a\u4e49\u884c\u4e3a\u3002</li> <li>\u7b80\u5316\u5185\u5b58\u7ba1\u7406\uff1a\u901a\u8fc7\u667a\u80fd\u6307\u9488\u81ea\u52a8\u7ba1\u7406\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\uff0c\u51cf\u5c11\u4e86\u624b\u52a8\u7ba1\u7406\u5185\u5b58\u7684\u590d\u6742\u6027\uff0c\u964d\u4f4e\u4e86\u5185\u5b58\u6cc4\u6f0f\u548c\u53cc\u91cd\u91ca\u653e\u7684\u98ce\u9669\u3002</li> <li>\u9632\u6b62\u591a\u91cd\u6240\u6709\u6743\uff1a\u76f4\u63a5\u5728\u7c7b\u5185\u90e8\u4f7f\u7528 <code>std::shared_ptr(this)</code> \u53ef\u80fd\u5bfc\u81f4\u591a\u4e2a\u72ec\u7acb\u7684 shared_ptr \u7ba1\u7406\u540c\u4e00\u5bf9\u8c61\uff0c\u9020\u6210\u5f15\u7528\u8ba1\u6570\u4e0d\u4e00\u81f4\u3002std::enable_shared_from_this \u786e\u4fdd\u4e86\u6240\u6709\u7684 shared_ptr \u5171\u4eab\u540c\u4e00\u4e2a\u5f15\u7528\u8ba1\u6570\u3002</li> </ul> <p>\u5728\u4e4b\u540e\u7684\u4ee3\u7801\u4e2d\uff0c\u6709\u5173Value\u7684\u5bf9\u8c61\u5747\u4f7f\u7528\u667a\u80fd\u6307\u9488\u6765\u7ba1\u7406\u751f\u547d\u5468\u671f\u3002</p>"},{"location":"%E4%B8%AD%E7%AB%AF/Value%E5%92%8CUser.html#_2","title":"\u6570\u636e\u7ed3\u6784","text":"<p>Value\u6301\u6709\u4ee5\u4e0b\u7684\u6570\u636e\uff1a</p> <ul> <li><code>name_</code>\uff1aValue\u7684\u540d\u79f0\uff08\u6216\u6807\u8bc6\u7b26\uff09</li> <li><code>type_</code>\uff1aValue\u7684\u7c7b\u578b\uff08\u53c2\u89c1\u7c7b\u578b\u7cfb\u7edf\u90e8\u5206\uff09</li> <li><code>users_</code>\uff1a\u4f7f\u7528\u8be5Value\u7684User\u5217\u8868</li> </ul>"},{"location":"%E4%B8%AD%E7%AB%AF/Value%E5%92%8CUser.html#_3","title":"\u63a5\u53e3","text":""},{"location":"%E4%B8%AD%E7%AB%AF/Value%E5%92%8CUser.html#_4","title":"\u62f7\u8d1d\u6784\u9020\u548c\u8d4b\u503c\u6784\u9020","text":"<p>Value\u7c7b\u7981\u6b62\u4e86\u901a\u8fc7\u62f7\u8d1d\u6784\u9020\u6216\u8d4b\u503c\u6784\u9020\u6765\u6784\u9020\u65b0\u7684Value\u5bf9\u8c61\u3002</p>"},{"location":"%E4%B8%AD%E7%AB%AF/Value%E5%92%8CUser.html#_5","title":"\u6807\u8bc6\u7b26\uff08\u540d\u79f0\uff09","text":"<p>\u83b7\u53d6Value\u5bf9\u8c61\u7684\u6807\u8bc6\u7b26\uff1a</p> <p><code>[[nodiscard]] const std::string &amp;get_name() const { return name_; }</code>\u3002</p> <p>\u4fee\u6539Value\u5bf9\u8c61\u7684\u6807\u8bc6\u7b26\uff1a</p> <p><code>void set_name(const std::string &amp;name) { this-&gt;name_ = name; }</code></p>"},{"location":"%E4%B8%AD%E7%AB%AF/Value%E5%92%8CUser.html#_6","title":"\u7c7b\u578b","text":"<p>\u83b7\u53d6Value\u5bf9\u8c61\u7684\u7c7b\u578b\uff1a</p> <p><code>[[nodiscard]] std::shared_ptr&lt;Type::Type&gt; get_type() const { return type_; }</code>\u3002</p>"},{"location":"%E4%B8%AD%E7%AB%AF/Value%E5%92%8CUser.html#valueuser_1","title":"\u4f7f\u7528\u8be5Value\u7684User","text":"<ul> <li> <p>\u83b7\u53d6\u5f53\u524d\u4f7f\u7528\u8be5Value\u5bf9\u8c61\u7684User\u5217\u8868\uff1a</p> <p><code>std::vector&lt;std::weak_ptr&lt;User&gt;&gt; &amp;weak_users() { return users_; }</code></p> <p>\u6ce8\u610f\uff1a\u8be5\u51fd\u6570\u8fd4\u56de\u7684\u662f\u4e00\u4e2aweak_ptr\u5217\u8868\uff0c\u9700\u8981\u53e6\u5916\u5224\u65ad\u6bcf\u4e2aweak_ptr\u662f\u5426\u6709\u6548\u3002</p> <p>\u5982\u679c\u9700\u8981\u5b89\u5168\u904d\u5386\u8be5value\u7684user\uff0c\u5efa\u8bae\u4f7f\u7528\u8fed\u4ee3\u5668\u3002</p> </li> <li> <p>\u6dfb\u52a0\u4f7f\u7528Value\u5bf9\u8c61\u7684User\uff0c\u6267\u884c\u5b8c\u6210\u540euser\u4e0evalue\u5f62\u6210<code>user-use-value</code>\u5173\u7cfb\uff1a</p> <p><code>void add_user(const std::shared_ptr&lt;User&gt; &amp;user)</code>\u3002</p> <p>\u5982\u679cuser\u5df2\u7ecf\u5728value\u7684users\u5217\u8868\u91cc\uff0c\u5219\u4e0d\u4f1a\u91cd\u590d\u6dfb\u52a0\u3002</p> <p>\u8be5\u51fd\u6570\u53ea\u7ef4\u62a4\u4e86Value\u7684\u88abuse\u5173\u7cfb\uff0c\u4e0d\u4f1a\u7ef4\u62a4User\u7684use\u5173\u7cfb\u3002</p> </li> <li> <p>\u5220\u9664\u4f7f\u7528Value\u5bf9\u8c61\u7684User\uff0c\u6267\u884c\u5b8c\u6210\u540euser\u4e0d\u518d\u4f7f\u7528value\uff1a</p> <p><code>void delete_user(const std::shared_ptr&lt;User&gt; &amp;user)</code>\u3002</p> <p>\u8be5\u51fd\u6570\u53ea\u7ef4\u62a4\u4e86Value\u7684\u88abuse\u5173\u7cfb\uff0c\u4e0d\u4f1a\u7ef4\u62a4User\u7684use\u5173\u7cfb\u3002</p> </li> <li> <p>\u6e05\u7406\u5931\u6548User\u5bf9\u8c61\uff1a</p> <p><code>void cleanup_users()</code></p> <p>\u4f7f\u7528<code>add_user</code>\uff0c<code>delete_user</code>\u4e0e<code>replace_by_new_value</code>\u51fd\u6570\u6216\u4f7f\u7528\u8fed\u4ee3\u5668\u65f6\uff0c\u4f1a\u5148\u884c\u81ea\u52a8\u8c03\u7528<code>cleanup_users</code>\u51fd\u6570\u3002</p> <p>Value\u5bf9\u5e94\u7684User\u88ab\u9500\u6bc1\u540e\uff0c\u5728users_\u4e2d\u53ef\u80fd\u4f9d\u7136\u5b58\u6709\u5bf9\u8be5user\u7684\u6307\u9488\u3002\u56e0\u6b64\u9700\u8981\u5728\u589e\u5220user\u65f6\u6e05\u7406users_\uff0c\u9632\u6b62\u51fa\u73b0\u8bbf\u5b58\u5f02\u5e38\u3002</p> </li> <li> <p>\u5b89\u5168\u904d\u5386value\u5bf9\u8c61\u7684user\u5217\u8868\uff1a</p> <p><code>value.users()</code></p> <p>\u8be5\u51fd\u6570\u4f1a\u6267\u884c<code>cleanup_users</code>\u51fd\u6570\uff0c\u6e05\u9664\u5df2\u88abfree\u7684User\u5bf9\u8c61\u3002</p> </li> </ul>"},{"location":"%E4%B8%AD%E7%AB%AF/Value%E5%92%8CUser.html#_7","title":"\u5e38\u503c","text":"<p>\u5224\u65ad\u67d0\u4e2aValue\u662f\u5426\u4e3a\u5e38\u503c\uff08\u5b57\u9762\u91cf\uff09\uff1a</p> <p><code>[[nodiscard]] virtual bool is_constant();</code></p>"},{"location":"%E4%B8%AD%E7%AB%AF/Value%E5%92%8CUser.html#_8","title":"\u5168\u5c40\u66ff\u6362","text":"<p>\u5c06\u6240\u6709\u4f7f\u7528\u8be5User\u7684Value\uff08old_value\uff09\u66ff\u6362\u4e3a\u53e6\u4e00\u4e2aValue\uff08new_value\uff09\uff1a</p> <p><code>void replace_by_new_value(const std::shared_ptr&lt;Value&gt; &amp;new_value);</code></p> <p>\u8be5\u51fd\u6570\u9996\u5148\u4f1a\u68c0\u67e5<code>old_value</code>\u4e0e<code>new_value</code>\u662f\u5426\u4e3a\u540c\u4e00\u7c7b\u578b\u3002\u5982\u679c\u6ee1\u8db3\u8be5\u6761\u4ef6\uff0c\u51fd\u6570\u4f1a\u8c03\u7528<code>User</code>\u7c7b\u4e2d\u7684<code>modify_operand</code>\u51fd\u6570\uff0c\u4f1a\u81ea\u52a8\u7ef4\u62a4old_value\u4e0enew_value\u4e0e\u76f8\u5173user\u7684\u4f7f\u7528\u5173\u7cfb\u3002</p> <p>\u5efa\u8bae\u540e\u7eed\u4f18\u5316\u4e2d\u5982\u679c\u51fa\u73b0value\u66ff\u6362\u7684\u573a\u666f\uff0c\u4f18\u5148\u4f7f\u7528\u672c\u51fd\u6570\u3002</p>"},{"location":"%E4%B8%AD%E7%AB%AF/Value%E5%92%8CUser.html#_9","title":"\u7c7b\u578b\u8f6c\u6362","text":"<p>\u5bf9\u6307\u5411Value\u5bf9\u8c61\u7684shared_ptr\u8fdb\u884c\u9759\u6001\u7c7b\u578b\u8f6c\u6362\uff1a</p> <p><code>template&lt;typename T&gt; std::shared_ptr&lt;T&gt; as()</code></p> <p>\u6ce8\u610f\uff1a\u8be5\u51fd\u6570\u5728\u77e5\u9053\u5bf9\u8c61\u7684\u771f\u5b9e\u7c7b\u578b\u65f6\u624d\u53ef\u4f7f\u7528\uff0c\u5982\u5f53\u8be5Value\u4e00\u5b9a\u662fInstruction\u65f6\uff0c\u53ef\u4f7f\u7528<code>value.as&lt;Mir::Instruction&gt;()</code>\u6765\u51cf\u5c11\u52a8\u6001\u8f6c\u6362\u5e26\u6765\u7684\u5f00\u9500\u3002\u5176\u4ed6\u60c5\u51b5\u4e0b\u8bf7\u4f7f\u7528<code>std::dynamic_pointer_cast&lt;typename T&gt;</code>\u3002</p>"},{"location":"%E4%B8%AD%E7%AB%AF/Value%E5%92%8CUser.html#user","title":"User","text":"<p>\u5728SHIT-complier\u4e2d\uff0cUser\u7c7b\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>class User : public Value {\nprotected:\n    std::vector&lt;std::shared_ptr&lt;Value&gt;&gt; operands_;\n\npublic:\n    User(const std::string &amp;name, const std::shared_ptr&lt;Type::Type&gt; &amp;type)\n        : Value{name, type} {}\n\n    User(const User &amp;other) = delete;\n\n    User &amp;operator=(const User &amp;other) = delete;\n\n    User(User &amp;&amp;other) = delete;\n\n    User &amp;operator=(User &amp;&amp;other) = delete;\n\n    ~User() override {\n        for (const auto &amp;operand: operands_) {\n            operand-&gt;delete_user(std::shared_ptr&lt;User&gt;(this, [](User *) {}));\n        }\n        operands_.clear();\n    }\n\n    const std::vector&lt;std::shared_ptr&lt;Value&gt;&gt; &amp;get_operands() const { return operands_; }\n\n    void add_operand(const std::shared_ptr&lt;Value&gt; &amp;value);\n\n    void clear_operands();\n\n    virtual void modify_operand(const std::shared_ptr&lt;Value&gt; &amp;old_value, const std::shared_ptr&lt;Value&gt; &amp;new_value);\n\n    auto begin() { return operands_.begin(); }\n    auto end() { return operands_.end(); }\n    auto begin() const { return operands_.begin(); }\n    auto end() const { return operands_.end(); }\n\n    void remove_operand(const std::shared_ptr&lt;Value&gt; &amp;value);\n};\n</code></pre>"},{"location":"%E4%B8%AD%E7%AB%AF/Value%E5%92%8CUser.html#_10","title":"\u6570\u636e\u7ed3\u6784","text":"<ul> <li><code>operands_</code>\uff1aUser\u5bf9\u8c61\u4f7f\u7528\u7684Value\u5bf9\u8c61\u5217\u8868\u3002</li> </ul> <p>\u8fd9\u91cc\u4f7f\u7528<code>std::vector&lt;std::shared_ptr&lt;Value&gt;&gt;</code>\uff0c\u662f\u56e0\u4e3aUser\u6301\u6709Value\uff0cUser\u63a7\u5236\u7740Value\u7684\u751f\u547d\u5468\u671f\u3002</p>"},{"location":"%E4%B8%AD%E7%AB%AF/Value%E5%92%8CUser.html#_11","title":"\u63a5\u53e3","text":"<p>\u4e0eValue\u7c7b\u4e00\u6837\uff0cUser\u7c7b\u4e0d\u652f\u6301\u62f7\u8d1d\u6784\u9020\u548c\u8d4b\u503c\u6784\u9020</p> <p>\u9664\u5148\u524dValue\u7c7b\u6240\u62e5\u6709\u7684\u63a5\u53e3\u4e4b\u5916\uff0cUser\u7c7b\u5177\u6709\u4ee5\u4e0b\u7684\u989d\u5916\u63a5\u53e3\uff1a</p>"},{"location":"%E4%B8%AD%E7%AB%AF/Value%E5%92%8CUser.html#uservalue","title":"User\u4f7f\u7528\u7684Value\uff08\u64cd\u4f5c\u6570\uff09","text":"<ul> <li> <p>\u83b7\u53d6\u64cd\u4f5c\u6570\u5217\u8868</p> <p><code>const std::vector&lt;std::shared_ptr&lt;Value&gt;&gt; &amp;get_operands() const { return operands_; }</code></p> </li> <li> <p>\u6dfb\u52a0\u64cd\u4f5c\u6570</p> <p><code>void add_operand(const std::shared_ptr&lt;Value&gt; &amp;value);</code></p> <p>\u8be5\u51fd\u6570\u540c\u65f6\u7ef4\u62a4\u4e86\u7ef4\u62a4\u4e86Value\u7684\u88abuse\u5173\u7cfb\u548cUser\u7684use\u5173\u7cfb\u3002</p> </li> <li> <p>\u5220\u9664\u64cd\u4f5c\u6570</p> <p><code>void remove_operand(const std::shared_ptr&lt;Value&gt; &amp;value)</code></p> <p>\u8be5\u51fd\u6570\u540c\u65f6\u7ef4\u62a4\u4e86\u7ef4\u62a4\u4e86Value\u7684\u88abuse\u5173\u7cfb\u548cUser\u7684use\u5173\u7cfb\u3002</p> </li> <li> <p>\u4fee\u6539\u64cd\u4f5c\u6570</p> <p><code>virtual void modify_operand(const std::shared_ptr&lt;Value&gt; &amp;old_value, const std::shared_ptr&lt;Value&gt; &amp;new_value)</code></p> <p>\u8be5\u51fd\u6570\u540c\u65f6\u7ef4\u62a4\u4e86\u7ef4\u62a4\u4e86Value\u7684\u88abuse\u5173\u7cfb\u548cUser\u7684use\u5173\u7cfb\u3002</p> <p>Phi\u6307\u4ee4\u5bf9\u8be5\u51fd\u6570\u8fdb\u884c\u4e86\u91cd\u5199\u3002</p> </li> <li> <p>\u6e05\u9664\u64cd\u4f5c\u6570</p> <p><code>void clear_operands()</code></p> <p>\u8be5\u51fd\u6570\u540c\u65f6\u7ef4\u62a4\u4e86\u7ef4\u62a4\u4e86Value\u7684\u88abuse\u5173\u7cfb\u548cUser\u7684use\u5173\u7cfb\u3002</p> <p>\u6790\u6784\u65f6<code>~User()</code>\u540c\u65f6\u4f1a\u6267\u884c<code>clear_operands</code>\uff0c\u4f46\u662f\u7531\u4e8e\u53ef\u80fd\u8be5User\u65e0\u4eba\u4f7f\u7528\u4f46\u5c1a\u672a\u6790\u6784\uff0c\u5efa\u8bae\u67d0\u4e00User\u4e0d\u518d\u88ab\u4f7f\u7528\u65f6\u53ef\u4ee5\u6267\u884c<code>clear_operands</code>\u51fd\u6570\u3002</p> </li> <li> <p>\u8fed\u4ee3\u5668</p> <p>User\u7c7b\u901a\u8fc7\u4ee5\u4e0b\u51fd\u6570\u5b9e\u73b0\u8fed\u4ee3\u5668\uff1a</p> <pre><code>auto begin() { return operands_.begin(); }\nauto end() { return operands_.end(); }\nauto begin() const { return operands_.begin(); }\nauto end() const { return operands_.end(); }\n</code></pre> <p>\u901a\u8fc7\u8fed\u4ee3\u5668\u53ef\u4ee5\u65b9\u4fbf\u7684\u904d\u5386User\u5bf9\u8c61\u7684\u64cd\u4f5c\u6570\u5217\u8868\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a</p> <pre><code>const std::shared_ptr&lt;Instruction&gt; inst = foo; // Instruction\u4e3aUser\u7684\u5b50\u7c7b\nfor (const auto &amp;operand: *inst) { // \u5c06inst\u8fdb\u884c\u89e3\u5f15\u7528\uff0c\u83b7\u5f97\u5b9e\u9645\u5bf9\u8c61\uff0c\u518d\u4f7f\u7528\u8fed\u4ee3\u5668\n    // \u6267\u884c\u64cd\u4f5c\n}\n</code></pre> </li> </ul>"},{"location":"%E4%B8%AD%E7%AB%AF/%E6%80%BB%E8%A7%88.html","title":"\u603b\u89c8","text":"<p>\u4e2d\u7aef\u7684\u4efb\u52a1\u662f\u63a5\u53d7\u524d\u7aef\u5df2\u89e3\u6790\u597d\u7684\u62bd\u8c61\u8bed\u6cd5\u6811\uff0c\u901a\u8fc7\u6784\u5efa\u5668(Builder)\u5c06AST\u7ffb\u8bd1\u4e3a\u7b49\u4ef7\u7684\u7ebf\u6027LLVM IR\u3002</p> <p>LLVM IR \u6709\u7740\u975e\u5e38\u4e25\u683c\u6e05\u6670\u7684\u7ed3\u6784\uff0c\u5982\u4e0b\u56fe\u3002</p> <p></p> <p>\u5728 LLVM IR \u4e2d\uff0c\u4e00\u4e2a <code>Module</code> \u7531\u82e5\u5e72 GlobalValue \u7ec4\u6210\uff0c\u800c\u4e00\u4e2a GlobalValue \u53ef\u4ee5\u662f<code>\u5168\u5c40\u53d8\u91cf\uff08GlobalVariable\uff09</code>\uff0c\u4e5f\u53ef\u4ee5\u662f<code>\u51fd\u6570\uff08Function\uff09</code>\u3002\u4e00\u4e2a\u51fd\u6570\u7531\u82e5\u5e72<code>\u57fa\u672c\u5757\uff08BasicBlock\uff09</code>\u7ec4\u6210\uff0c\u5728\u57fa\u672c\u5757\u5185\u90e8\uff0c\u5219\u662f\u7531\u82e5\u5e72<code>\u6307\u4ee4\uff08Instruction\uff09</code>\u7ec4\u6210\uff0c\u4e5f\u662f LLVM IR \u7684\u57fa\u672c\u7ec4\u6210\u3002</p> <p>LLVM IR \u4e2d\u6240\u6709\u7c7b\u90fd\u76f4\u63a5\u6216\u95f4\u63a5\u7ee7\u627f\u81ea Value\uff0c\u56e0\u6b64\u5728 LLVM IR \u4e2d\uff0c\u6709<code>\u201c\u4e00\u5207\u7686 Value\u201d</code>\u7684\u8bf4\u6cd5\u3002\u4e3a\u4e86\u8868\u8fbe Value \u4e4b\u95f4\u7684\u5f15\u7528\u5173\u7cfb\uff0cLLVM IR \u4e2d\u8fd8\u6709\u4e00\u79cd\u7279\u6b8a\u7684 Value \u53eb\u505a User\uff0c\u5176\u5c06\u5176\u4ed6 Value \u4f5c\u4e3a\u53c2\u6570\u3002</p> <p>\u5728SHIT-compiler\u4e2d\uff0c\u6709\u5173\u4e8eIR\u7684\u7c7b\u5747\u4f4d\u4e8e<code>namespace Mir</code>\u4e2d\uff0c\u4ee3\u7801\u4f4d\u4e8e<code>src/Mir</code>\u6216<code>include/Mir</code>\u8def\u5f84\u4e0b\uff0c\u4e4b\u540e\u4e0d\u518d\u8d58\u8ff0\u3002</p>"},{"location":"%E5%89%8D%E7%AB%AF/%E6%80%BB%E8%A7%88.html","title":"\u603b\u89c8","text":"<p>\u524d\u7aef\u5206\u4e3a\u8bcd\u6cd5\u5206\u6790\u5668(Lexer)\u548c\u8bed\u6cd5\u5206\u6790\u5668(Parser)\u3002</p> <ul> <li>Lexer\u83b7\u53d6\u6e90\u7a0b\u5e8f\u7684\u5185\u5bb9\uff08\u4e00\u4e2a\u957f\u5b57\u7b26\u4e32\uff09\uff0c\u8fd4\u56de\u4e00\u4e2a<code>std::vector&lt;Token::Token&gt;</code>\uff0c\u5b58\u50a8\u7684\u662f\u5206\u5272\u597d\u7684Token\u7684\u5217\u8868\u3002</li> <li>Parse\u63a5\u53d7Token\u5217\u8868\u6784\u5efa\u8bed\u6cd5\u6811\uff0c\u8fd4\u56de\u4e00\u4e2a<code>std::shared_ptr&lt;AST::CompUnit&gt;</code>\uff0c\u4e3a\u8bed\u6cd5\u6811\u7684\u6839\u8282\u70b9\u3002</li> </ul>"},{"location":"%E5%89%8D%E7%AB%AF/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.html","title":"\u8bcd\u6cd5\u5206\u6790","text":"<p>\u4f5c\u8005\uff1azxw</p> <p>\u6700\u8fd1\u4e00\u6b21\u66f4\u65b0\u4e8e2025/3/23</p> <p>Lexer\u7c7b\u5b9a\u4e49\u4e8e<code>include/Frontend/Lexer.h</code>\uff0c\u5b9e\u73b0\u4e8e<code>src/Frontend/Lexer.cpp</code>\u3002</p> <p>Lexer\u4f7f\u7528\u7684Token\u7c7b\u5b9a\u4e49\u4e8e<code>include/Utils/Token.h</code>\u3002</p>"},{"location":"%E5%89%8D%E7%AB%AF/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.html#token","title":"Token","text":"<p>\u8bcd\u6cd5\u5355\u5143\u7c7b<code>Token</code>\u4f4d\u4e8e<code>namespace Token</code>\u4e0b\uff0c\u6570\u636e\u7ed3\u6784\u4e3a\uff1a</p> <pre><code>class Token {\npublic:\n    // \u6e90\u7a0b\u5e8f\u5b57\u7b26\u4e32\n    const std::string content;\n    // token\u7c7b\u578b\n    const Type type;\n    // token\u6240\u5728\u7684\u884c\u53f7\n    const int line;\n\n    Token(std::string c, const Type t, const int l)\n        : content(std::move(c)), type(t), line(l) {}\n\n    [[nodiscard]] std::string to_string() const;\n};\n</code></pre> <p>Type\u4e3a<code>namespace Token</code>\u4e0b\u7684\u4e00\u4e2a\u679a\u4e3e\u7c7b\uff0c\u6807\u8bb0\u4e86\u6bcf\u4e2atoken\u5c5e\u4e8e\u4ec0\u4e48\u7c7b\u578b\uff1a <pre><code>enum class Type {\n    // \u5173\u952e\u8bcd\n    CONST, INT, FLOAT, VOID, IF, ELSE, WHILE, BREAK, CONTINUE, RETURN,\n    // \u6807\u8bc6\u7b26\n    IDENTIFIER,\n    // \u5b57\u9762\u91cf\n    INT_CONST, FLOAT_CONST, STRING_CONST,\n    // \u8fd0\u7b97\u7b26\n    ADD, SUB, NOT, MUL, DIV, MOD,\n    LT, GT, LE, GE, EQ, NE, AND, OR,\n    // \u5206\u9694\u7b26\n    SEMICOLON, COMMA, ASSIGN,\n    LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET,\n    // \u7ed3\u675f\u7b26\n    END_OF_FILE,\n    // \u672a\u77e5\n    UNKNOWN\n};\n</code></pre></p>"},{"location":"%E5%89%8D%E7%AB%AF/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.html#lexer","title":"Lexer","text":""},{"location":"%E5%89%8D%E7%AB%AF/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.html#_2","title":"\u63a5\u53e3","text":"<p>Lexer\u5728<code>Compiler.cpp</code>\u4e2d\u7684\u63a5\u53e3\u4e3a<code>tokenize</code>\uff0c\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a <pre><code>// \u4ece\u6587\u4ef6\u4e2d\u8bfb\u5165\u6e90\u7a0b\u5e8f\nstd::ifstream file(options.input_file);\nif (!file.is_open()) {\n    log_fatal();\n}\n\nstd::stringstream buffer;\nbuffer &lt;&lt; file.rdbuf();\nstd::string src_code = buffer.str();\nfile.close();\nLexer lexer(src_code);\nconst std::vector&lt;Token::Token&gt; &amp;tokens = lexer.tokenize();\n</code></pre></p> <p>Lexer\u63a5\u53d7<code>std::string</code>\u7684\u6e90\u7a0b\u5e8f\u5185\u5bb9\uff0c\u8fd4\u56de<code>std::vector&lt;Token::Token&gt;</code>\uff0c\u662f\u5206\u5272\u597d\u7684Token\u7684\u5217\u8868\u3002</p>"},{"location":"%E5%89%8D%E7%AB%AF/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.html#_3","title":"\u5b9e\u73b0","text":""},{"location":"%E5%89%8D%E7%AB%AF/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.html#consume_line_comment","title":"consume_line_comment","text":"<p>\u200b\u5339\u914d\u6389\u4e24\u4e2a / \u5b57\u7b26\uff0c\u4e4b\u540e\u4e00\u76f4\u5339\u914d\u4e0b\u4e00\u4e2a\\n\u524d\u7684\u6240\u6709\u5b57\u7b26\u3002</p> <p>\u200b\u5176\u4e2d\u505a\u8d8a\u754c\u68c0\u67e5\uff0c\u9632\u6b62\u6700\u540e\u4e00\u884c\u4e4b\u540e\u65e0\\n\u3002</p>"},{"location":"%E5%89%8D%E7%AB%AF/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.html#consume_block_comment","title":"consume_block_comment","text":"<p>\u200b\u5339\u914d\u6389/*\u5b57\u7b26\uff0c\u4e4b\u540e\u4e00\u76f4\u5339\u914d\u77e5\u9053\u9047\u5230*/ \u518d\u5c06\u5176\u5339\u914d\u6389\u3002</p> <p>\u200b\u5176\u4e2d\u505a\u8d8a\u754c\u68c0\u67e5\u3002</p>"},{"location":"%E5%89%8D%E7%AB%AF/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.html#consume_ident_or_keyword","title":"consume_ident_or_keyword","text":"<p>\u200b\u4ee5\u9996\u5b57\u7b26\u6240\u5728\u884c\u6570\u4e3a token \u884c\u6570\uff0c\u5224\u65ad\u662f\u5426\u662f\u6807\u8bc6\u7b26\u4e2d\u5b57\u7b26\u3002</p> <p>\u200b\u4e4b\u540e\u4ee5 keywords.find \u68c0\u67e5\u5b57\u7b26\u5185\u5bb9\uff0c\u627e\u5230\u65f6\u8fd4\u56de\u5bf9\u5e94\u5173\u952e\u5b57\u7684token\uff0c\u5426\u5219\u8fd4\u56de\u6807\u8bc6\u7b26token\u3002</p>"},{"location":"%E5%89%8D%E7%AB%AF/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.html#consume_number","title":"consume_number","text":"<p>\u8bc6\u522b\u524d\u7f00\uff0c\u5e76\u6309\u524d\u7f00\u5206\u8fdb\u5236\u8bc6\u522b\u6570\u5b57\uff0c\u533a\u5206\u6574\u6570\u4e0e\u6d6e\u70b9\u6570\u3002</p> <p>\u8fd9\u91cc\u76f4\u63a5\u8f6c\u6362\u4e3a\u5341\u8fdb\u5236\u6574\u6570\u6216\u6d6e\u70b9\u6570\uff0c\u518d\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u3002</p>"},{"location":"%E5%89%8D%E7%AB%AF/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.html#consume_string","title":"consume_string","text":"<p>\u9996\u5148\u5438\u6536\u4e00\u4e2a\u5f15\u53f7\uff0c\u4e4b\u540e\u82e5\u4e3a\u8f6c\u4e49\u7b26\u53f7\uff0c\u8fde\u7eed\u5438\u6536\u4e24\u4e2a\u5b57\u7b26\uff1b\u82e5\u4e3a\u5f15\u53f7\u5219\u7ed3\u675f\uff0c\u5426\u5219\u7ee7\u7eed\u3002</p> <p>\u5b57\u7b26\u4e32\u5f62\u6210 Token \u65f6\uff0c\u5b57\u7b26\u5185\u5bb9\u53ea\u5305\u542b\u53cc\u5f15\u53f7\u4e2d\u95f4\u5185\u5bb9\uff0c\u4e0d\u5305\u542b\u53cc\u5f15\u53f7\u5185\u5bb9\u3002</p>"},{"location":"%E5%89%8D%E7%AB%AF/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.html#consume_operator","title":"consume_operator","text":"<p>\u5148\u5339\u914d\u4e24\u4e2a\u5b57\u7b26\uff0c\u5339\u914d\u4e0d\u6210\u529f\uff1a\u5339\u914d\u5355\u4e2a\u5b57\u7b26\uff0c\u5426\u5219\u8fd4\u56de\u7279\u6b8a\u7b26\u53f7 UNKNOWN\u3002</p>"},{"location":"%E5%89%8D%E7%AB%AF/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.html#tokenize","title":"tokenize","text":"<p>\u68c0\u67e5\u9996\u5b57\u7b26\uff0c\u89c2\u5bdf\u662f\u5426\u9700\u8981\u8df3\u8fc7\u7a7a\u767d\u90e8\u5206\u6216\u6ce8\u91ca\u3002</p> <p>\u4e4b\u540e\u5206\u4e3a\u56db\u79cd\u60c5\u51b5\uff1a</p> <ul> <li>\u5b57\u6bcd/<code>_</code> \uff1a\u6807\u8bc6\u7b26</li> <li>\u6570\u5b57\u6216<code>.</code>\uff1anumber</li> <li>\u53cc\u5f15\u53f7\uff1a\u5b57\u7b26\u4e32</li> <li>\u5176\u4ed6\uff1a\u5206\u9694\u7b26\u6216\u7279\u6b8a\u5b57\u7b26</li> </ul> <p>\u6700\u540e\u52a0\u5165\u7279\u6b8a\u7684 <code>END_OF_FILE</code> token\u3002</p>"},{"location":"%E5%89%8D%E7%AB%AF/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90.html","title":"\u8bed\u6cd5\u5206\u6790","text":"<p>\u4f5c\u8005\uff1azxw</p> <p>\u6700\u8fd1\u4e00\u6b21\u66f4\u65b0\u4e8e2025/3/23</p> <p>Parser\u7c7b\u5b9a\u4e49\u4e8e<code>include/Frontend/Parser.h</code>\uff0c\u5b9e\u73b0\u4e8e<code>src/Frontend/Parser.cpp</code>\u3002</p> <p>Parser\u4f7f\u7528\u7684\u8bed\u6cd5\u6811AST\u7c7b\u5b9a\u4e49\u4e8e<code>include/Utils/AST.h</code>\u3002</p>"},{"location":"%E5%89%8D%E7%AB%AF/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90.html#ast","title":"AST","text":"<p>\u62bd\u8c61\u8bed\u6cd5\u6811\u7c7b<code>AST</code>\u4f4d\u4e8e<code>namespace AST</code>\u4e0b\u3002</p> <p>\u6bcf\u4e2a\u8bed\u6cd5\u6210\u5206\u90fd\u53ef\u4ee5\u62bd\u8c61\u4e3a\u7ed3\u70b9\uff0c\u5b9a\u4e49\u7ed3\u70b9\u62bd\u8c61\u57fa\u7c7b<code>Node</code>\u5982\u4e0b\uff1a <pre><code>// AST \u7ed3\u70b9\u57fa\u7c7b\nclass Node {\npublic:\n    virtual ~Node() = default;\n\n    [[nodiscard]] virtual std::string to_string() const = 0;\n};\n</code></pre></p> <p>Sysy\u8bed\u8a00\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <p></p> <p></p> <p>\u6216\u8005\uff0c\u4f7f\u7528Antlr4\u7684g4\uff08grammar\uff09\u6587\u4ef6\uff0c\u53ef\u5c06Sysy\u8bed\u8a00\u7684\u5b9a\u4e49\u8868\u793a\u5982\u4e0b\uff1a</p> <pre><code>grammar SysY2022;\n\n// \u4e3b\u89c4\u5219\ncompUnit: (decl | funcDef)* EOF;\n\n// \u58f0\u660e\u90e8\u5206\ndecl: constDecl | varDecl;\nconstDecl: 'const' bType=('int' | 'float') constDef[$bType.text] (',' constDef[$bType.text])* ';';\nvarDecl: bType=('int' | 'float') varDef[$bType.text] (',' varDef[$bType.text])* ';';\n\n// \u5e38\u91cf\u5b9a\u4e49\nconstDef[String type]: IDENT ('[' constExp ']')* '=' constInitVal;\nconstInitVal: constExp | '{' (constInitVal (',' constInitVal)*)? '}';\n\n// \u53d8\u91cf\u5b9a\u4e49\nvarDef[String type]: IDENT ('[' constExp ']')* ('=' initVal)?;\ninitVal: exp | '{' (initVal (',' initVal)*)? '}';\n\n// \u51fd\u6570\u5b9a\u4e49\nfuncDef: funcType=('void' | 'int' | 'float') IDENT '(' funcFParams? ')' block;\nfuncFParams: funcFParam (',' funcFParam)*;\nfuncFParam: bType=('int' | 'float') IDENT ('[' ']' ('[' exp ']')*)?;\n\n// \u8bed\u53e5\u5757\u548c\u8bed\u53e5\nblock: '{' blockItem* '}';\nblockItem: decl | stmt;\nstmt: lVal '=' exp ';'                            # assignStmt\n    | exp? ';'                                    # expStmt\n    | block                                       # blockStmt\n    | 'if' '(' cond ')' stmt ('else' stmt)?       # ifStmt\n    | 'while' '(' cond ')' stmt                   # whileStmt\n    | 'break' ';'                                 # breakStmt\n    | 'continue' ';'                              # continueStmt\n    | 'return' exp? ';'                           # returnStmt\n    ;\n\n// \u8868\u8fbe\u5f0f\u90e8\u5206\nexp: addExp | StringConst;\ncond: lOrExp;\nlVal: IDENT ('[' exp ']')*;\nprimaryExp: '(' exp ')' | lVal | number;\nnumber: FLOAT_NUMBER | HEX_CONST | OCT_CONST | INT_CONST;\nunaryExp: primaryExp | IDENT '(' funcRParams? ')' | unaryOp unaryExp;\nunaryOp: ADD | SUB | NOT;\nfuncRParams: exp (',' exp)*;\nmulExp: unaryExp (op=(MUL | DIV | MOD) unaryExp)*;\naddExp: mulExp (op=(ADD | SUB) mulExp)*;\nrelExp: addExp (op=(LE | GE | LT | GT) addExp)*;\neqExp: relExp (op=(EQ | NE) relExp)*;\nlAndExp: eqExp (AND eqExp)*;\nlOrExp: lAndExp (OR lAndExp)*;\nconstExp: addExp;\n\n// \u8bcd\u6cd5\u5b9a\u4e49\nIDENT: [a-zA-Z_][a-zA-Z_0-9]*;\nADD: '+';\nSUB: '-';\nNOT: '!';\nMUL: '*';\nDIV: '/';\nMOD: '%';\nLT: '&lt;';\nGT: '&gt;';\nLE: '&lt;=';\nGE: '&gt;=';\nEQ: '==';\nNE: '!=';\nAND: '&amp;&amp;';\nOR: '||';\n\n// \u652f\u6301\u5341\u8fdb\u5236\u3001\u5341\u516d\u8fdb\u5236\u548c\u516b\u8fdb\u5236\u6574\u6570\nINT_CONST: '0' | [1-9][0-9]*;\nHEX_CONST: '0x' [0-9a-fA-F]+ | '0X' [0-9a-fA-F]+;\nOCT_CONST: '0' [0-7]+;\n\n// \u6d6e\u70b9\u6570\u5b9a\u4e49\nFLOAT_NUMBER\n    : DecimalFloatingConstant\n    | HexadecimalFloatingConstant\n    ;\n\n// \u5341\u8fdb\u5236\u6d6e\u70b9\u6570\nfragment DecimalFloatingConstant\n    : FractionalConstant ExponentPart? FloatingSuffix?\n    | DigitSequence ExponentPart FloatingSuffix?\n    ;\n\n// \u5341\u516d\u8fdb\u5236\u6d6e\u70b9\u6570\nfragment HexadecimalFloatingConstant\n    : HexadecimalPrefix HexadecimalFractionalConstant BinaryExponentPart FloatingSuffix?\n    | HexadecimalPrefix HexadecimalDigitSequence BinaryExponentPart FloatingSuffix?\n    ;\n\n// \u5206\u6570\u5e38\u91cf\nfragment FractionalConstant\n    : DigitSequence? '.' DigitSequence\n    | DigitSequence '.'\n    ;\n\n// \u5341\u8fdb\u5236\u6307\u6570\u90e8\u5206\nfragment ExponentPart\n    : [eE] Sign? DigitSequence\n    ;\n\n// \u4e8c\u8fdb\u5236\u6307\u6570\u90e8\u5206\nfragment BinaryExponentPart\n    : [pP] Sign? DigitSequence\n    ;\n\n// \u7b26\u53f7\nfragment Sign\n    : '+' | '-'\n    ;\n\n// \u5341\u8fdb\u5236\u6570\u5b57\u5e8f\u5217\nfragment DigitSequence\n    : Digit+\n    ;\n\n// \u5341\u516d\u8fdb\u5236\u5206\u6570\u5e38\u91cf\nfragment HexadecimalFractionalConstant\n    : HexadecimalDigitSequence? '.'\n    | HexadecimalDigitSequence '.'\n    ;\n\n// \u5341\u516d\u8fdb\u5236\u6570\u5b57\u5e8f\u5217\nfragment HexadecimalDigitSequence\n    : HexadecimalDigit+\n    ;\n\n// \u5341\u516d\u8fdb\u5236\u524d\u7f00\nfragment HexadecimalPrefix\n    : '0' [xX]\n    ;\n\n// \u6d6e\u70b9\u6570\u540e\u7f00\nfragment FloatingSuffix\n    : [fF] | [lL]\n    ;\n\n// \u6570\u5b57\nfragment Digit\n    : [0-9]\n    ;\n\n// \u5341\u516d\u8fdb\u5236\u6570\u5b57\nfragment HexadecimalDigit\n    : [0-9a-fA-F]\n    ;\n\n// \u5b57\u7b26\u4e32\u5e38\u91cf\nStringConst: '\"' (~[\"\\\\] | '\\\\' .)* '\"' ;\n\n// \u7a7a\u767d\u7b26\u548c\u6ce8\u91ca\nWS: [ \\t\\r\\n]+ -&gt; skip;\nLINE_COMMENT: '//' ~[\\r\\n]* -&gt; skip;\nBLOCK_COMMENT: '/*' .*? '*/' -&gt; skip;\n</code></pre> <p>\u5bf9\u4e8e\u5f62\u5982<code>PrimaryExp -&gt; '(' Exp ')' | LVal | Number</code>\u7684\u8bed\u6cd5\u89c4\u5219\uff0c\u5728<code>PrimaryExp</code>\u7c7b\u4f7f\u7528<code>std::variant</code>\u5b58\u50a8\u53ef\u53d8\u7c7b\u578b\uff0c\u5e76\u914d\u5907<code>is_{exp|lVal|number}</code>\u65b9\u6cd5\u6765\u5224\u65ad<code>PrimaryExp</code>\u6240\u5b58\u50a8\u7684\u5b50\u7ed3\u70b9\u7684\u5177\u4f53\u7c7b\u578b\u3002</p> <pre><code>// PrimaryExp -&gt; '(' Exp ')' | LVal | Number\nclass PrimaryExp final : public Node {\n    const std::variant&lt;std::shared_ptr&lt;Exp&gt;, std::shared_ptr&lt;LVal&gt;, std::shared_ptr&lt;Number&gt;&gt; value_;\n\npublic:\n    explicit PrimaryExp(const std::shared_ptr&lt;Exp&gt; &amp;exp) : value_{exp} {}\n\n    explicit PrimaryExp(const std::shared_ptr&lt;LVal&gt; &amp;lVal) : value_{lVal} {}\n\n    explicit PrimaryExp(const std::shared_ptr&lt;Number&gt; &amp;number) : value_{number} {}\n\n    [[nodiscard]] std::variant&lt;std::shared_ptr&lt;Exp&gt;, std::shared_ptr&lt;LVal&gt;,\n        std::shared_ptr&lt;Number&gt;&gt; get_value() const { return value_; }\n\n    [[nodiscard]] bool is_exp() const {\n        return std::holds_alternative&lt;std::shared_ptr&lt;Exp&gt;&gt;(value_);\n    }\n\n    [[nodiscard]] bool is_lVal() const {\n        return std::holds_alternative&lt;std::shared_ptr&lt;LVal&gt;&gt;(value_);\n    }\n\n    [[nodiscard]] bool is_number() const {\n        return std::holds_alternative&lt;std::shared_ptr&lt;Number&gt;&gt;(value_);\n    }\n\n    [[nodiscard]] std::string to_string() const override;\n};\n</code></pre> <p>\u8be5\u7c7b\u7684\u4e00\u79cd\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a <pre><code>// Builder.cpp\nstd::shared_ptr&lt;Value&gt; Builder::visit_primaryExp(const std::shared_ptr&lt;AST::PrimaryExp&gt; &amp;primaryExp) const {\n    if (primaryExp-&gt;is_number()) {\n        return visit_number(std::get&lt;std::shared_ptr&lt;AST::Number&gt;&gt;(primaryExp-&gt;get_value()));\n    }\n    if (primaryExp-&gt;is_lVal()) {\n        return visit_lVal(std::get&lt;std::shared_ptr&lt;AST::LVal&gt;&gt;(primaryExp-&gt;get_value()));\n    }\n    if (primaryExp-&gt;is_exp()) {\n        return visit_exp(std::get&lt;std::shared_ptr&lt;AST::Exp&gt;&gt;(primaryExp-&gt;get_value()));\n    }\n    log_fatal(\"Invalid primaryExp\");\n}\n</code></pre></p>"},{"location":"%E5%89%8D%E7%AB%AF/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90.html#parser","title":"Parser","text":"<p>\u8bed\u6cd5\u5206\u6790\u5668\u7c7bParser\u7684\u4e3b\u8981\u4efb\u52a1\u662f\u9012\u5f52\u4e0b\u964d\uff0c\u5206\u6790\u6240\u6709\u8bed\u6cd5\u6210\u5206\uff0c\u6784\u9020AST\u3002</p> <p>\u5728Parser\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u7c7b\u90fd\u5177\u6709\u4e00\u4e2aparse\u65b9\u6cd5\uff0c\u5982<code>parseDecl</code>\uff0c<code>parseWhileStmt</code>\u7b49\u3002</p>"},{"location":"%E5%89%8D%E7%AB%AF/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90.html#_2","title":"\u63a5\u53e3","text":"<p>Parser\u5728<code>Compiler.cpp</code>\u7684\u63a5\u53e3\u4e3a<code>parse</code>\uff0c\u5b9a\u4e49\u4e0e\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a <pre><code>// Parser.h\nstd::shared_ptr&lt;AST::CompUnit&gt; parse() {\n    return parseCompUnit();\n}\n\n// Compiler.cpp\nconst std::vector&lt;Token::Token&gt; &amp;tokens = lexer.tokenize();\n\nParser parser(tokens);\nstd::shared_ptr&lt;AST::CompUnit&gt; ast = parser.parse();\n</code></pre></p> <p>Parse\u63a5\u53d7Token\u5217\u8868\u6784\u5efa\u8bed\u6cd5\u6811\uff0c\u8fd4\u56de\u4e00\u4e2a<code>std::shared_ptr&lt;AST::CompUnit&gt;</code>\uff0c\u4e3a\u8bed\u6cd5\u6811\u7684\u6839\u8282\u70b9\u3002</p>"},{"location":"%E5%89%8D%E7%AB%AF/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90.html#_3","title":"\u5b9e\u73b0","text":"<p>Parser\u7c7b\u4e2d\u5b9a\u4e49\u4e86\u4e24\u4e2a\u6a21\u677f\u51fd\u6570\u7528\u4e8e\u5224\u65ad\u5f53\u524d\u4f4d\u7f6e\u7684token\u662f\u5426\u4e3a\u9884\u671f\u7684type\u3002 <pre><code>template&lt;typename... Types&gt;\nbool Parser::panic_on(Types... expected_types) {\n    std::unordered_set&lt;Token::Type&gt; types = {expected_types...};\n    if (const Token::Type current_type = peek().type; types.find(current_type) == types.end()) {\n        std::ostringstream oss;\n        oss &lt;&lt; \"Expected one of { \";\n        for (const auto &amp;type: types) {\n            oss &lt;&lt; type_to_string(type) &lt;&lt; \" \";\n        }\n        oss &lt;&lt; \"}, got Token \" &lt;&lt; type_to_string(current_type) &lt;&lt; \" at line \" &lt;&lt; peek().line;\n        log_fatal(oss.str().c_str());\n    }\n    pos++;\n    return true;\n}\n\ntemplate&lt;typename... Types&gt;\nbool Parser::match(Types... expected_types) {\n    std::unordered_set&lt;Token::Type&gt; types = {expected_types...};\n    if (const Token::Type current_type = peek().type; types.find(current_type) == types.end()) return false;\n    pos++;\n    return true;\n}\n</code></pre></p> <p><code>panic</code>\u51fd\u6570\u5728\u5f53\u524dtoken\u7684type\u4e0d\u9002\u4e8e\u4efb\u4f55\u4e00\u4e2a<code>expected_types</code>\u65f6\uff0c\u4f1a\u53d1\u751f<code>fatal</code>\u5f02\u5e38\uff0c\u800c<code>match</code>\u65b9\u6cd5\u4e0d\u4f1a\u3002</p> <p><code>panic</code>\u548c<code>match</code>\u7684\u4e00\u4e2a\u4f7f\u7528\u793a\u4f8b\u5982\u4e0b\uff1a</p> <pre><code>// constDef[String type]: IDENT ('[' constExp ']')* '=' constInitVal;\nstd::shared_ptr&lt;AST::ConstDef&gt; Parser::parseConstDef() {\n    panic_on(Token::Type::IDENTIFIER);\n    const std::string ident = next(-1).content;\n    std::vector&lt;std::shared_ptr&lt;AST::ConstExp&gt;&gt; constExps;\n    if (match(Token::Type::LBRACKET)) {\n        do {\n            constExps.emplace_back(parseConstExp());\n            panic_on(Token::Type::RBRACKET);\n        } while (match(Token::Type::LBRACKET));\n    }\n    panic_on(Token::Type::ASSIGN);\n    std::shared_ptr&lt;AST::ConstInitVal&gt; constInitVal = parseConstInitVal();\n    return std::make_shared&lt;AST::ConstDef&gt;(ident, constExps, constInitVal);\n}\n</code></pre>"},{"location":"%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/%E5%BE%80%E5%B1%8A%E6%AF%94%E8%B5%9B%E4%BD%9C%E5%93%81.html","title":"\u5f80\u5c4a\u6bd4\u8d5b\u4f5c\u54c1","text":"<p>\u6301\u7eed\u66f4\u65b0</p> <ul> <li>cmmc</li> <li>NEL</li> <li>NUDT SysY Compiler for CSC-2024</li> </ul>"},{"location":"%E5%90%8E%E7%AB%AF/%E6%80%BB%E8%A7%88.html","title":"\u603b\u89c8","text":"<p>\u65bd\u5de5\u4e2d</p>"},{"location":"%E6%A6%82%E8%BF%B0/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.html","title":"SHIT-Compiler README\u6587\u6863","text":"<p>SysY \u8bed\u8a00\u7f16\u8bd1\u5668\uff0c\u8ba1\u7b97\u673a\u7cfb\u7edf\u80fd\u529b\u5927\u8d5b\u7f16\u8bd1\u7cfb\u7edf\u8bbe\u8ba1\u8d5b\uff08\u534e\u4e3a\u6bd5\u6607\u676f\uff09\u53c2\u8d5b\u4f5c\u54c1\u3002</p>"},{"location":"%E6%A6%82%E8%BF%B0/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.html#_1","title":"\u6784\u5efa","text":"<pre><code># \u5728\u6839\u76ee\u5f55\u4e0b\u6267\u884c\nmkdir build &amp;&amp; cd build\ncmake .. -D CMAKE_BUILD_TYPE={Debug, Release, RelWithDebInfo} # \u8bbe\u5b9a\u4f18\u5316\u7b49\u7ea7\nmake -j 4\n# \u6784\u5efa\u597d\u7684\u76ee\u6807\u4e3a../bin/compiler\n</code></pre> <p>\u5728Debug\u6a21\u5f0f\u4e0b\uff0c\u5b9a\u4e49\u4e86\u5b8f <code>-DSHIT_DEBUG</code> \uff0c\u8bbe\u7f6e\u65e5\u5fd7\u8f93\u51fa\u7b49\u7ea7\u4e3a <code>TRACE</code>\uff1b\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e3a <code>INFO</code>\u3002</p>"},{"location":"%E6%A6%82%E8%BF%B0/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.html#_2","title":"\u547d\u4ee4\u884c\u4f7f\u7528\u65b9\u6cd5","text":"<pre><code>./compiler \u8f93\u5165\u6587\u4ef6 [\u9009\u9879]\n</code></pre> <p>Debug\u6a21\u5f0f\u4e0b\uff0c\u4f1a\u8f7d\u5165\u9ed8\u8ba4\u6570\u636e\uff0c\u65b9\u4fbf\u5f00\u53d1\uff1a <pre><code>compiler_options debug_compile_options = {\n    .input_file = \"../testcase.sy\",\n    .flag_S = true,\n    .output_file = \"../testcase.s\",\n    ._emit_options = {.emit_tokens = false, .emit_ast = false, .emit_llvm = true},\n    .opt_level = Optimize_level::O0\n};\n</code></pre></p>"},{"location":"%E6%A6%82%E8%BF%B0/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.html#_3","title":"\u5fc5\u9700\u53c2\u6570","text":"<ul> <li><code>\u8f93\u5165\u6587\u4ef6</code>\uff1a\u6e90\u4ee3\u7801\u6587\u4ef6\u8def\u5f84\uff08\u4f7f\u7528 .sy \u6269\u5c55\u540d\uff09</li> </ul>"},{"location":"%E6%A6%82%E8%BF%B0/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.html#_4","title":"\u53ef\u9009\u53c2\u6570","text":""},{"location":"%E6%A6%82%E8%BF%B0/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.html#_5","title":"\u8f93\u51fa\u63a7\u5236","text":"<ul> <li><code>-S</code>\uff1a\u751f\u6210\u6c47\u7f16\u4ee3\u7801\u8f93\u51fa</li> <li><code>-o &lt;\u6587\u4ef6&gt;</code>\uff1a\u6307\u5b9a\u6c47\u7f16\u8f93\u51fa\u6587\u4ef6\uff08\u9ed8\u8ba4\u4e3a\uff1a\u8f93\u5165\u6587\u4ef6\u540d.s\uff09</li> </ul>"},{"location":"%E6%A6%82%E8%BF%B0/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.html#_6","title":"\u4f18\u5316\u9009\u9879","text":"<ul> <li><code>-O0</code>\uff1a\u4e0d\u8fdb\u884c\u4f18\u5316\uff08\u9ed8\u8ba4\u9009\u9879\uff09</li> <li><code>-O1</code>\uff1a\u57fa\u7840\u4f18\u5316</li> <li><code>-O2</code>\uff1a\u9ad8\u7ea7\u4f18\u5316</li> </ul>"},{"location":"%E6%A6%82%E8%BF%B0/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.html#_7","title":"\u4e2d\u95f4\u8868\u793a\u8f93\u51fa","text":"<ul> <li><code>-emit-tokens [&lt;\u6587\u4ef6&gt;]</code>\uff1a\u8f93\u51fa\u8bcd\u6cd5\u6807\u8bb0</li> <li><code>-emit-ast [&lt;\u6587\u4ef6&gt;]</code>\uff1a\u8f93\u51fa\u62bd\u8c61\u8bed\u6cd5\u6811</li> <li><code>-emit-llvm [&lt;\u6587\u4ef6&gt;]</code>\uff1a\u8f93\u51fa LLVM IR\uff08\u9ed8\u8ba4\u4e3a\uff1a\u8f93\u5165\u6587\u4ef6\u540d.ll\uff09</li> </ul> <p>\u5bf9\u4e8e\u6240\u6709\u7684 emit \u9009\u9879\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\u8f93\u51fa\u6587\u4ef6\uff0c\u5c06\u76f4\u63a5\u8f93\u51fa\u5230\u6807\u51c6\u8f93\u51fa\uff08stdout\uff09\u3002</p>"},{"location":"%E6%A6%82%E8%BF%B0/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.html#_8","title":"\u4f7f\u7528\u793a\u4f8b","text":"<ol> <li> <p>\u57fa\u672c\u7684\u6c47\u7f16\u4ee3\u7801\u751f\u6210\uff1a <pre><code>./compiler test.sy -S\n</code></pre> \u8fd9\u5c06\u751f\u6210 <code>test.s</code> \u4f5c\u4e3a\u8f93\u51fa\u6587\u4ef6\u3002</p> </li> <li> <p>\u6307\u5b9a\u81ea\u5b9a\u4e49\u8f93\u51fa\u6587\u4ef6\u5e76\u542f\u7528\u4f18\u5316\uff1a <pre><code>./compiler source.sy -S -o output.s -O2\n</code></pre></p> </li> <li> <p>\u8f93\u51fa\u6240\u6709\u4e2d\u95f4\u8868\u793a\uff1a <pre><code>./compiler program.sy -emit-tokens tokens.txt -emit-ast ast.txt -emit-llvm ir.ll\n</code></pre></p> </li> <li> <p>\u4f7f\u7528\u4f18\u5316\u5e76\u67e5\u770b\u8bcd\u6cd5\u6807\u8bb0\uff1a <pre><code>./compiler input.sy -O1 -emit-tokens\n</code></pre> \u8bcd\u6cd5\u6807\u8bb0\u5c06\u76f4\u63a5\u6253\u5370\u5230\u6807\u51c6\u8f93\u51fa\u3002</p> </li> <li> <p>\u540c\u65f6\u751f\u6210\u6c47\u7f16\u4ee3\u7801\u548c LLVM IR\uff1a <pre><code>./compiler test.sy -S -emit-llvm\n</code></pre> \u5c06\u521b\u5efa <code>test.s</code> \u548c <code>test.ll</code> \u4e24\u4e2a\u6587\u4ef6\u3002</p> </li> </ol>"},{"location":"%E6%A6%82%E8%BF%B0/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.html#_9","title":"\u8f93\u51fa\u793a\u4f8b","text":"<p>\u8fd0\u884c\u7f16\u8bd1\u5668\u65f6\uff0c\u4f1a\u663e\u793a\u89e3\u6790\u540e\u7684\u9009\u9879\u4fe1\u606f\u3002\u4f8b\u5982\uff1a <pre><code>[    0ms] INFO  Driver.cpp:41: Options: -input=../testcase.sy, -S=false, opt=-O1, -emit-ast=stdout, -emit-llvm=../testcase.ll\n</code></pre></p>"},{"location":"%E6%A6%82%E8%BF%B0/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.html#_10","title":"\u9519\u8bef\u63d0\u793a","text":"<p>\u7f16\u8bd1\u5668\u5728\u4ee5\u4e0b\u60c5\u51b5\u4f1a\u663e\u793a\u76f8\u5e94\u7684\u9519\u8bef\u4fe1\u606f\uff1a</p> <ul> <li>\u672a\u6307\u5b9a\u8f93\u5165\u6587\u4ef6</li> <li>\u6307\u5b9a\u4e86\u591a\u4e2a\u8f93\u5165\u6587\u4ef6</li> <li>\u4f7f\u7528\u4e86\u672a\u77e5\u7684\u547d\u4ee4\u884c\u9009\u9879</li> <li>\u65e0\u6cd5\u6253\u5f00\u8f93\u5165/\u8f93\u51fa\u6587\u4ef6</li> <li>\u7f3a\u5c11\u5fc5\u9700\u7684\u9009\u9879\u53c2\u6570</li> </ul>"}]}